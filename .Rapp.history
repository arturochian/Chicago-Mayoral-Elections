h
xtfrm
? xtfrm
? as.quoted
getAnywhere('as.quoted')
library(plyr)
getAnywhere('as.quoted')
? as.quoted
as.quoted(a ~ b + log(d))
as.quote('a')
as.quoted('a')
as.quoted('b')
as.quoted(a)
? eval.quoted
head(baseball)
x = as.quoted(c('id', 'year'))
x
eval.quoted(x, baseball)
y = eval.quoted(x, baseball)
str(y)
class(y)
y2 = Filter(is.numeric, baseball)
str(y2)
stopifnot
? stopifnot
strip_splits
? strip_splits
dlply(mtcars, c('vs', 'am'))
dlply(mtcars, c('vs', 'am'), strip_splits)
? strip_splits
y3 = strip_splits(y2)
y3
str(y3)
quickdf
? quickdf
quickdf
as.data.frame
make_names
plyr:::make_names
plyr:::make_names(tip)
plyr:::make_names(tips)
plyr:::make_names(mtcars)
plyr:::make_names(mtcars, prefix = 'Y')
mtcars
rename(mtcars, c('disp' = 'displ'))
mtcars
? setNames
dcf_to_list <- function(filename){#
    my_dcf  = read.dcf(filename)#
    my_list = as.list(my_dcf)#
    setNames(my_list, names(my_dcf))#
	# names(my_list) = colnames(my_dcf)#
	# 	return(my_list)#
}
h = dcf_to_list('~/Desktop/temp.dcf')
h
dcf_to_list <- function(filename){#
    my_dcf  = read.dcf(filename)#
    my_list = as.list(my_dcf)#
    setNames(my_list, colnames(my_dcf))#
	# names(my_list) = colnames(my_dcf)#
	# 	return(my_list)#
}
h = dcf_to_list('~/Desktop/temp.dcf')
h
dcf_to_list <- function(filename){#
    my_dcf  = read.dcf(filename)#
    setNames(as.list(my_dcf), colnames(my_dcf))#
}
h = dcf_to_list('~/Desktop/temp.dcf')
h
old_names = names(mtcars)
old_names
? replace
names(replace)
r = c('dips' = 'displ', 'drat' = 'drattt')
names(r)
r = c(dips = 'displ', drat = 'drattt')
names9r
names(r)
rename(mtcars, c(disp = 'displ'))
match(old_names, names(r))
unname(r)
old_names
r
match(old_names, names(r))
old_names
r = c(disp = 'displ', drat = 'drattt')
match(old_names, names(r))
r[match(old_names, names(r))]
unname(r[match(old_names, names(r))])
unname(r)[match(old_names, names(r))]
? stats
summarize(baseball, length(unique(team)))
summarize(baseball, nteams = length(unique(team)))
eval(substitute(list(nteams = length(unique(team)))), baseball)
? deparse
args(lm)
deparse(args(lm))
deparse(substitute('d'))
e = quote(`foo bar`)
e
deparse(e)
deparse(e, backtick = TRUE)
? match.call
? match.arg
ggplot_build
library(ggpot2)
library(ggplot2)
ggplot_build
? ggplot_build
cor
package.skeleton
update.packages()
file.path(R.home(), "doc/KEYWORDS")
readLines(file.path(R.home(), "doc/KEYWORDS"))
cat(readLines(file.path(R.home(), "doc/KEYWORDS")))
library(foreign)
df = read.dta('~/Downloads/foiacm.dta')
df = read.fwf('~/Downloads/foiacm.dta', c(9,90,38,34,34,18,2,5,1,1,3,1,1,38,9))
df = read.fwf('~/Downloads/foiacm.dta', c(9,90,38,34,34,18,2,5,1,1,3,1,1,38,9), sep = "\n")
dim(df)
head(df)
str(df)
df = read.fwf('~/Downloads/foiacm.dta', c(9,90,38,34,34,18,2,5,1,1,3,1,1,38,9), sep = "")
df = read.fwf('~/Downloads/foiacm.dta', c(9,90,38,34,34,18,2,5,1,1,3,1,1,38,9), sep = " ")
? read.fwf
df = read.fwf('~/Downloads/foiacm.dta', c(9,90,38,34,34,18,2,5,1,1,3,1,1,38,9))
? read.fwf
df = read.fwf('~/Downloads/foiacm.dta', c(9,90,38,34,34,18,2,5,1,1,3,1,1,38,9), skip = 2)
df = read.fwf('~/Downloads/foiacm.dta', c(9,90,38,34,34,18,2,5,1,1,3,1,1,38,9), sep = "")
df = read.fwf('~/Downloads/foiacm.dta', c(9,90,38,34,34,18,2,5,1,1,3,1,1,38,9), sep = " \t")
df = read.fwf('~/Downloads/foiacm.dta', c(9,90,38,34,34,18,2,5,1,1,3,1,1,38,9), sep = "\n")
dim(df)
df[1]
df = read.fwf('~/Downloads/foiacm.dta', c(99,38,34,34,18,2,5,1,1,3,1,1,38,9))
df = read.fwf('~/Downloads/foiacm.dta', c(9,90,38,34,34,18,2,5,1,1,3,1,1,38,9), strip.white = TRUE)
df = read.fwf('~/Downloads/foiacm.dta', c(9,90,38,34,34,18,2,5,1,1,3,1,1,38,9), comment.char = "")
dim(df)
head(df)
? dir
setwd('~/Desktop/R Projects/Chicago Mayoral Elections')
ls()
dir()
log <- system('git log -n 1', intern = TRUE)
log
? system
log[1]
log[2]
log[3]
gitlog <- function(){#
	log <- system("git log -n 1", intern=TRUE) #
	commitID <- log[1]#
	author <- log[2]#
	date <- log[3]#
	short_comment <- log[5]#
	commitID <- strsplit(commitID, " ")[[1]][2]   # Hashtag without the word "commit" before it#
  shortID <- gsub("(.{7}).+", "\\1", commitID)#
# Consider the shortened ID#
list(commitID = commitID, author=author, date=date, short_comment=short_comment, shortID=shortID)#
}
h = gitlog()
h
repository <-gsub(".*/(.*)/.*$", "\\1", getwd())
repository
getwd()
guess_gitopts <- function(user="cboettig", repository=NULL, dir=NULL){#
  if(is.null(repository)) ## guesses is one directory up#
    repository <-gsub(".*/(.*)/.*$", "\\1", getwd())#
  if(is.null(dir)) ## guess the current directory#
    dir <-gsub(".*/(.*)$", "\\1", getwd())#
  list(user="cboettig", repository=repository, dir=dir)#
}
guess_gitopts()
log
str_split_fixed(log, "[:\\s+]", 2)
library(stringr)
str_split_fixed(log, "[:\\s+]", 2)
str_split_fixed(log, "[:|\\s+]", 2)
str_split_fixed(log, "[\\s+]", 2)
str_split_fixed(log, "[\\s]", 2)
strsplit(log[1], " ")
str_split_fixed(log, "(:|\\s+)", 2)
strsplit(log, "(:|\\s+)", 2)
? strsplit
strsplit(log, ":")
log <- str_split_fixed(log, "(:|\\s+)", 2)
log
details <- as.list(log[,2])
details
details <- as.list(str_trim(log[,2]))
details
names(details) <- c(log[1:4], 'comment')
details
get_git_log <- function(){#
	require(stringr)#
	log <- system("git log -n 1", intern = TRUE)#
	log <- str_split_fixed(log, "(:|\\s+)", 2)#
	details <- as.list(str_trim(log[-4,2]))#
	names(details) <- c(log[1:3], 'comment')#
	return(details)	#
}
get_git_log()
gitlog()
details
as.Date(details$Date)
as.POSIXct(details$Date)
today()
library(lubridate)
today()
now()
get_git_log <- function(){#
	require(stringr)#
	log <- system("git log -n 1", intern = TRUE)#
	log <- str_split_fixed(log, "(:|\\s+)", 2)#
	short_id <- str_extract(log[1,2], 1, 7)#
	details <- as.list(str_trim(log[-4,2]), short_id)#
	names(details) <- c(log[1:3], 'comment', 'short_id')#
	return(details)	#
}
get_git_log()
? str_extract
? str_sub
get_git_log <- function(){#
	require(stringr)#
	log <- system("git log -n 1", intern = TRUE)#
	log <- str_split_fixed(log, "(:|\\s+)", 2)#
	short_id <- str_sub(log[1,2], 1, 7)#
	details <- as.list(str_trim(log[-4,2]), short_id)#
	names(details) <- c(log[1:3], 'comment', 'short_id')#
	return(details)	#
}
get_git_log()
log <- system("git log -n 1", intern = TRUE)#
	log <- str_split_fixed(log, "(:|\\s+)", 2)#
	short_id <- str_sub(log[1,2], 1, 7)#
	details <- as.list(str_trim(log[-4,2]), short_id)
details
	details <- c(str_trim(log[-4,2]), short_id)
details
gitlog()
system("cat .gitconfig", intern = TRUE)
x = system("cat .gitconfig", intern = TRUE)
x = system('git config --list', intern = TRUE)
x
dir()
dir(.git)
? dir
dir(all = TRUE)
list.files('.git')
list.files('.')
list.files('..')
path.expand('.')
path.expand('..')
list.files('..')
system('git config --list')
git_opts = system('git config --list', intern = TRUE)
git_opts
guess_gitopts <- function(user="cboettig", repository=NULL, dir=NULL){#
  if(is.null(repository)) ## guesses is one directory up#
    repository <-gsub(".*/(.*)/.*$", "\\1", getwd())#
  if(is.null(dir)) ## guess the current directory#
    dir <-gsub(".*/(.*)$", "\\1", getwd())#
  list(user="cboettig", repository=repository, dir=dir)#
}
guess_gitopts(user = NULL)
git_url <- function(scriptname, user="cboettig", repository=NULL, dir=NULL,#
                    raw=FALSE, diff=FALSE){#
#
  if(scriptname=="") # if empty scriptname, we must have wanted a commit diff#
    diff<-TRUE #
  #
  if(is.null(repository)) ## guesses is one directory up#
    repository <-gsub(".*/(.*)/.*$", "\\1", getwd())#
  if(is.null(dir)) ## guess the current directory#
    dir <-gsub(".*/(.*)$", "\\1", getwd())#
	log <- gitlog()#
	id <- gsub("\\s", "/", log$commitID)#
  domain <- "https://github.com"#
#
  if(raw)#
    out <- paste("https://raw.github.com", user, repository, id, dir, scriptname, sep="/") #
  else if(diff)#
    out <- paste(domain, user, repository, "commit", id, sep="/") #
  else #
    out <- paste(domain, user, repository, "blob", id, dir, scriptname, sep
}
git_url <- function(scriptname, user="cboettig", repository=NULL, dir=NULL,#
                    raw=FALSE, diff=FALSE){#
#
  if(scriptname=="") # if empty scriptname, we must have wanted a commit diff#
    diff<-TRUE #
  #
  if(is.null(repository)) ## guesses is one directory up#
    repository <-gsub(".*/(.*)/.*$", "\\1", getwd())#
  if(is.null(dir)) ## guess the current directory#
    dir <-gsub(".*/(.*)$", "\\1", getwd())#
	log <- gitlog()#
	id <- gsub("\\s", "/", log$commitID)#
  domain <- "https://github.com"#
#
  if(raw)#
    out <- paste("https://raw.github.com", user, repository, id, dir, scriptname, sep="/") #
  else if(diff)#
    out <- paste(domain, user, repository, "commit", id, sep="/") #
  else #
    out <- paste(domain, user, repository, "blob", id, dir, scriptname, sep)}
git_url()
dir()
dir('2_code')
git_url('2_code/archive.R')
git_url <- function(scriptname, user="cboettig", repository=NULL, dir=NULL,#
                    raw=FALSE, diff=FALSE){#
#
  if(scriptname=="") # if empty scriptname, we must have wanted a commit diff#
    diff<-TRUE #
  #
  if(is.null(repository)) ## guesses is one directory up#
    repository <-gsub(".*/(.*)/.*$", "\\1", getwd())#
  if(is.null(dir)) ## guess the current directory#
    dir <-gsub(".*/(.*)$", "\\1", getwd())#
	log <- gitlog()#
	id <- gsub("\\s", "/", log$commitID)#
  domain <- "https://github.com"#
#
  if(raw)#
    out <- paste("https://raw.github.com", user, repository, id, dir, scriptname, sep="/") #
  else if(diff)#
    out <- paste(domain, user, repository, "commit", id, sep="/") #
  else #
    out <- paste(domain, user, repository, "blob", id, dir, scriptname, sep = "/")}
git_url('2_code/archive.R')
y = git_url('2_code/archive.R')
y
x = system('curl -i https://api.github.com')
x = system('curl -i https://api.github.com', intern = TRUE)
:--     0>
x
x = system('curl -i https://api.github.com', intern = TRUE)
--:--     0>
x
library(RCurl)
? RCurl
? curl
library(help = 'RCurl')
x = getURL('https://api.github.com')
x
? getURL
getCurlHandle()
x = getURL('https://api.github.com', curl = getCurlHandle())
x
myCsv <- getURL("https://gist.github.com/raw/667867/c47ec2d72801cfd84c6320e1fe37055ffe600c87/test.csv")#
WhatJDwants <- read.csv(textConnection(myCsv))
head(WhatJDwants)
whatJDwants
head(myCsv)
x = system('curl -u "ramnathv:iluvSangeetha" https://api.github.com')
x = system('curl -u "ramnathv:iluvsangeetha" https://api.github.com')
x
update.packages()
update.packages()
system('uname -n', intern = TRUE)
library(RFlickr)
install.package('RFlickr', repos = 'http://www.omegahat.org')
install.packages('RFlickr', repos = 'http://www.omegahat.org')
install.packages('RFlickr', repos = 'http://www.omegahat.org', type = 'source')
install.packages(file.choose(), repos = NULL, contribURL = NULL, type = 'source')
library(Rflickr)
library(help = 'Rflickr')
tok = authenticate(getOption('flickr_api_key'))
? authenticate
